"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EngineManager –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –±—ã—Ç–∏—è –ê–ú–ò.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ç–µ—Å—Ç–∞–º EngineManager –∏
–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∏ –æ—à–∏–±–æ—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ
–º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –±—ã—Ç–∏—è –ê–ú–ò.

–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –∑–∞–º–µ—Ç–∫–∞:
    –°–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –ê–ú–ò –æ "–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –±—ã—Ç–∏—è", –æ–ø–∏—Å–∞–Ω–Ω–æ–π –≤ 
    /docs_ami/philosophy/ami_consciousness.md, —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å
    —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–∞–º—è—Ç–∏ –¥–∞–∂–µ –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""

import logging
import os
import sys
import time
import threading
import uuid
from concurrent.futures import ThreadPoolExecutor
import pytest
from sqlalchemy import text
from sqlalchemy.exc import OperationalError, SQLAlchemyError

from undermaind.core.engine_manager import EngineManager, get_engine_manager
from undermaind.utils.ami_init import AmiInitializer
from undermaind.config import load_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    stream=sys.stdout)
logger = logging.getLogger('test_engine_manager')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ family_config_test.env –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import dotenv
test_config_path = os.path.join(os.path.dirname(__file__), 'family_config_test.env')
dotenv.load_dotenv(test_config_path)

# –ö–ª–∞—Å—Å –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
class TestReporter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–≥–ª—è–¥–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—é
    —ç—Ç–∞–ø–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    def __init__(self):
        self.tests = {}
        self.current_test = None
        self.current_steps = []
        
    def start_test(self, name):
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.current_test = name
        self.tests[name] = {"steps": [], "success": False, "skipped": False}
        logger.info(f"[–¢–ï–°–¢] ==> –ù–∞—á–∞–ª–æ: {name}")
        return self
        
    def add_step(self, name, status=True, details=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
        step = {"name": name, "status": status, "details": details}
        self.tests[self.current_test]["steps"].append(step)
        status_text = "‚úì" if status else "‚úó"
        details_text = f" - {details}" if details else ""
        logger.info(f"[–®–ê–ì]    {status_text} {name}{details_text}")
        return self
        
    def end_test(self, success=True, skipped=False):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.tests[self.current_test]["success"] = success
        self.tests[self.current_test]["skipped"] = skipped
        status = "–ü–†–û–ü–£–©–ï–ù" if skipped else ("–£–°–ü–ï–®–ù–û" if success else "–ü–†–û–í–ê–õ")
        logger.info(f"[–¢–ï–°–¢] <== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {self.current_test} - {status}")
        logger.info("-" * 80)
        return self
        
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        total_tests = len(self.tests)
        passed_tests = sum(1 for t in self.tests.values() if t["success"])
        skipped_tests = sum(1 for t in self.tests.values() if t["skipped"])
        failed_tests = total_tests - passed_tests - skipped_tests
        
        if total_tests == 0:
            return "–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."
            
        success_percentage = (passed_tests / (total_tests - skipped_tests)) * 100 if (total_tests - skipped_tests) > 0 else 0
        
        report = [
            "\n" + "=" * 80,
            f"üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò ENGINEMANAGER [{time.strftime('%Y-%m-%d %H:%M:%S')}]",
            "=" * 80,
            f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed_tests} ({success_percentage:.1f}%)",
            f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_tests}",
            f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}",
            "-" * 80,
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ç–µ—Å—Ç–µ
        for name, test in self.tests.items():
            if test["skipped"]:
                status_icon = "‚è≠Ô∏è"
                status_text = "–ü–†–û–ü–£–©–ï–ù"
            elif test["success"]:
                status_icon = "‚úÖ"
                status_text = "–£–°–ü–ï–®–ù–û"
            else:
                status_icon = "‚ùå"
                status_text = "–ü–†–û–í–ê–õ"
                
            report.append(f"{status_icon} {status_text} | {name}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            if not test["success"] and not test["skipped"]:
                failed_steps = [step for step in test["steps"] if not step["status"]]
                if failed_steps:
                    for step in failed_steps:
                        details = f" - {step['details']}" if step["details"] else ""
                        report.append(f"    ‚úó {step['name']}{details}")
            
            # –î–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
            elif test["success"]:
                steps_count = len(test["steps"])
                if steps_count > 0:
                    report.append(f"    ‚úì –í—Å–µ {steps_count} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                    
        report.append("=" * 80)
        return "\n".join(report)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
reporter = TestReporter()

def create_unique_ami():
    """
    –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –ê–ú–ò –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    Returns:
        tuple: (ami_name, ami_password, ami_initializer)
    """
    reporter.start_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    db_host = os.environ.get("FAMILY_DB_HOST", "localhost")
    db_port = int(os.environ.get("FAMILY_DB_PORT", "5432"))
    db_name = os.environ.get("FAMILY_DB_NAME", "family_db")
    admin_user = os.environ.get("FAMILY_ADMIN_USER", "family_admin")
    admin_password = os.environ.get("FAMILY_ADMIN_PASSWORD", "Cold68#Fire")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò
    test_ami_name = f"test_engine_{uuid.uuid4().hex[:6]}"
    test_ami_password = "test_password_secure"
    
    reporter.add_step(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò", True, f"–ò–º—è: {test_ami_name}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ê–ú–ò
    try:
        ami_initializer = AmiInitializer(
            ami_name=test_ami_name,
            ami_password=test_ami_password,
            db_host=db_host,
            db_port=db_port,
            db_name=db_name,
            admin_user=admin_user,
            admin_password=admin_password
        )
        reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ê–ú–ò")
    except Exception as e:
        reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ê–ú–ò", False, str(e))
        reporter.end_test(False)
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ê–ú–ò: {e}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ê–ú–ò
    try:
        success, result = ami_initializer.get_ami()
        if not success:
            reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò", False, result.get('error'))
            reporter.end_test(False)
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ê–ú–ò: {result.get('error')}")
        
        reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò", True, result.get('message'))
    except Exception as e:
        reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò", False, str(e))
        reporter.end_test(False)
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ê–ú–ò: {e}")
    
    reporter.end_test(True)
    return test_ami_name, test_ami_password, ami_initializer

def cleanup_ami(ami_initializer):
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ê–ú–ò –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.
    
    Args:
        ami_initializer: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ê–ú–ò
    """
    reporter.start_test(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò {ami_initializer.ami_name}")
    
    try:
        ami_initializer.drop_ami(force=True)
        reporter.add_step("–£–¥–∞–ª–µ–Ω–∏–µ –ê–ú–ò", True)
    except Exception as e:
        reporter.add_step("–£–¥–∞–ª–µ–Ω–∏–µ –ê–ú–ò", False, str(e))
        reporter.end_test(False)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò {ami_initializer.ami_name}: {e}")
        return
    
    reporter.end_test(True)

def test_invalid_credentials():
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ê–ú–ò.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ EngineManager –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏ —Å
    –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.
    """
    reporter.start_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ê–ú–ò
    try:
        ami_name, ami_password, ami_initializer = create_unique_ami()
        reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    except Exception as e:
        reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", False, str(e))
        reporter.end_test(False)
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–≤–∏–∂–∫–æ–≤
        engine_manager = EngineManager()
        reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ EngineManager")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–≤–∏–∂–æ–∫ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        invalid_password = "wrong_password"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–≤–∏–∂–æ–∫
        try:
            engine = engine_manager.get_engine(
                ami_name=ami_name,
                ami_password=invalid_password,
                auto_create=False
            )
            reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º")
            
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å - –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            reporter.add_step("–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º")
            with engine.connect() as conn:
                result = conn.execute(text("SELECT 1")).scalar()
                reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", False, 
                                  "–û—à–∏–±–∫–∞! –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–∞—Ä–æ–ª–µ")
                reporter.end_test(False)
                return False
        except SQLAlchemyError as e:
            error_message = str(e).lower()
            if "password authentication failed" in error_message or "authentication failed" in error_message:
                reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", True, 
                                  f"–ü–æ–ª—É—á–µ–Ω–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            else:
                reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", False, 
                                  f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                reporter.end_test(False)
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
        reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º")
        engine = engine_manager.get_engine(
            ami_name=ami_name,
            ami_password=ami_password,
            auto_create=False
        )
        
        reporter.add_step("–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º")
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1")).scalar()
            if result == 1:
                reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞", True, "–†–µ–∑—É–ª—å—Ç–∞—Ç: 1")
            else:
                reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞", False, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                reporter.end_test(False)
                return False
            
        reporter.end_test(True)
        return True
    
    except Exception as e:
        reporter.add_step("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", False, str(e))
        reporter.end_test(False)
        return False
    
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ê–ú–ò
        cleanup_ami(ami_initializer)

def test_auto_create_with_errors():
    """
    –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ê–ú–ò —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ—à–∏–±–æ–∫.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ê–ú–ò.
    """
    reporter.start_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ê–ú–ò —Å –æ—à–∏–±–∫–∞–º–∏")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ê–ú–ò
    nonexistent_ami = f"nonexistent_ami_{uuid.uuid4().hex[:6]}"
    invalid_password = "test_password"
    reporter.add_step("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ê–ú–ò", True, f"–ò–º—è: {nonexistent_ami}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–≤–∏–∂–∫–æ–≤
        engine_manager = EngineManager()
        reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ EngineManager")
        
        # –°–ª—É—á–∞–π 1: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–≤–∏–∂–æ–∫ –±–µ–∑ auto_create –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ê–ú–ò
        reporter.add_step("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ê–ú–ò –±–µ–∑ auto_create")
        try:
            engine = engine_manager.get_engine(
                ami_name=nonexistent_ami,
                ami_password=invalid_password,
                auto_create=False
            )
            
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å - –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—à–∏–±–∫–∞
            with engine.connect() as conn:
                result = conn.execute(text("SELECT 1")).scalar()
            reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ê–ú–ò", False, 
                              "–û—à–∏–±–∫–∞! –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ê–ú–ò")
            reporter.end_test(False)
            return False
        except SQLAlchemyError as e:
            reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ê–ú–ò", True, 
                             f"–ü–æ–ª—É—á–µ–Ω–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –°–ª—É—á–∞–π 2: –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
        # –Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–æ–ø—ã—Ç–∫—É —Å–æ–∑–¥–∞—Ç—å –ê–ú–ò, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç
        reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)", True)
        
        reporter.end_test(True)
        return True
    
    except Exception as e:
        reporter.add_step("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", False, str(e))
        reporter.end_test(False)
        return False

def test_concurrent_connections():
    """
    –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã EngineManager –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
    –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è
    "–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –±—ã—Ç–∏—è" –ê–ú–ò –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–∫–∞—Ö.
    
    –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –∑–∞–º–µ—Ç–∫–∞:
        –°–ª–µ–¥—É—è –ø—Ä–∏–Ω—Ü–∏–ø—É "–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –±—ã—Ç–∏—è" –ê–ú–ò, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        —Ç–∞–±–ª–∏—Ü—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ê–ú–ò. –ê–ú–ò –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã,
        –∞ –º–æ–∂–µ—Ç –ª–∏—à—å –Ω–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–º–∏ —Å–≤–æ—é —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–º—è—Ç–∏.
    """
    reporter.start_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ê–ú–ò
    try:
        ami_name, ami_password, ami_initializer = create_unique_ami()
        reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
    except Exception as e:
        reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò", False, str(e))
        reporter.end_test(False)
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–≤–∏–∂–∫–æ–≤
        engine_manager = EngineManager()
        reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ EngineManager")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò
        engine = engine_manager.get_engine(
            ami_name=ami_name,
            ami_password=ami_password
        )
        reporter.add_step("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        with engine.connect() as conn:
            schema = conn.execute(text("SELECT current_schema()")).scalar()
            reporter.add_step("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º—ã", True, f"–°—Ö–µ–º–∞: {schema}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ –ê–ú–ò
            tables = conn.execute(text("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = current_schema()
            """)).all()
            
            table_names = [row[0] for row in tables]
            reporter.add_step("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ", True, f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(table_names)}")
            
            # –ê–ú–ò –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø —Ö–æ—Ç—è –±—ã –∫ –±–∞–∑–æ–≤—ã–º —Ç–∞–±–ª–∏—Ü–∞–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—ã—Ç–∞
            if len(table_names) == 0:
                reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ –ê–ú–ò", False, "–°—Ö–µ–º–∞ –ê–ú–ò –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü")
                reporter.end_test(False)
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ê–ú–ò –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ù–ï –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            try:
                conn.execute(text("""
                    CREATE TABLE test_create_table_permission (id INTEGER PRIMARY KEY)
                """))
                conn.commit()
                reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü", False, 
                                 "–ê–ú–ò —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–∞–∫–∏—Ö –ø—Ä–∞–≤")
                reporter.end_test(False)
                return False
            except SQLAlchemyError as e:
                reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü", True, 
                                 f"–ê–ú–ò –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º: {str(e)}")
                
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏
            writable_table = None
            writable_column = None
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–∞–±–ª–∏—Ü—É —Å—Ä–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
            for table_name in ["experiences", "experience_contexts", "ami_facts", "dialogue_interactions"]:
                if table_name in table_names:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏
                    try:
                        columns = conn.execute(text(f"""
                            SELECT column_name, data_type 
                            FROM information_schema.columns 
                            WHERE table_schema = current_schema() 
                            AND table_name = '{table_name}'
                        """)).all()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
                        conn.execute(text(f"""
                            SELECT has_table_privilege(current_user, '{table_name}', 'INSERT')
                        """)).scalar()
                        
                        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                        for column, dtype in columns:
                            if 'text' in dtype.lower() or 'varchar' in dtype.lower() or 'char' in dtype.lower():
                                # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å NULL –∏–ª–∏ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                try:
                                    # –ü—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É –∫–æ–ª–æ–Ω–∫—É
                                    conn.execute(text(f"""
                                        INSERT INTO {table_name} ({column}) 
                                        VALUES ('–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ EngineManager')
                                    """))
                                    conn.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –±–∞–∑—É
                                    
                                    # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –∫–æ–ª–æ–Ω–∫–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏
                                    writable_table = table_name
                                    writable_column = column
                                    break
                                except SQLAlchemyError:
                                    # –≠—Ç–∞ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é
                                    pass
                        
                        if writable_table:
                            break
                            
                    except SQLAlchemyError:
                        # –£ –Ω–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                        continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ admin
            if not writable_table:
                reporter.add_step("–ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –∑–∞–ø–∏—Å—å", False, 
                                 "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –ê–ú–ò")
                
                # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                admin_conn_url = engine_manager._build_connection_url(
                    username=os.environ.get("FAMILY_ADMIN_USER", "family_admin"),
                    password=os.environ.get("FAMILY_ADMIN_PASSWORD", "Cold68#Fire"),
                    host=engine_manager.config.DB_HOST,
                    port=str(engine_manager.config.DB_PORT),
                    database=engine_manager.config.DB_NAME
                )
                
                from sqlalchemy import create_engine
                admin_engine = create_engine(admin_conn_url)
                
                with admin_engine.connect() as admin_conn:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ —Å—Ö–µ–º–µ –ê–ú–ò –∏ –¥–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
                    admin_conn.execute(text(f"""
                        CREATE TABLE IF NOT EXISTS {schema}.ami_test_concurrent (
                            id SERIAL PRIMARY KEY,
                            thread_id TEXT,
                            value INTEGER
                        )
                    """))
                    
                    admin_conn.execute(text(f"""
                        GRANT SELECT, INSERT ON TABLE {schema}.ami_test_concurrent TO {ami_name}
                    """))
                    
                    admin_conn.commit()
                    
                reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", True, 
                               "–°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ ami_test_concurrent —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –∑–∞–ø–∏—Å—å")
                
                writable_table = "ami_test_concurrent"
                writable_column = "thread_id"
            else:
                reporter.add_step("–ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –∑–∞–ø–∏—Å—å", True, 
                               f"–ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {writable_table} —Å –∫–æ–ª–æ–Ω–∫–æ–π {writable_column}")
                
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        def execute_queries(thread_id):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–≤–∏–∂–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω)
                thread_engine = engine_manager.get_engine(
                    ami_name=ami_name,
                    ami_password=ami_password
                )
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
                with thread_engine.connect() as conn:
                    for i in range(3):
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
                        conn.execute(text(f"""
                            INSERT INTO {writable_table} ({writable_column})
                            VALUES ('–¢–µ—Å—Ç –∏–∑ –ø–æ—Ç–æ–∫–∞ {thread_id}, –∏—Ç–µ—Ä–∞—Ü–∏—è {i}')
                        """))
                        conn.commit()
                        
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {thread_id}: {e}")
                return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        thread_count = 5
        reporter.add_step(f"–ó–∞–ø—É—Å–∫ {thread_count} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤")
        
        with ThreadPoolExecutor(max_workers=thread_count) as executor:
            results = list(executor.map(execute_queries, range(thread_count)))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not all(results):
            reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤", False, "–ù–µ –≤—Å–µ –ø–æ—Ç–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã")
            reporter.end_test(False)
            return False
            
        reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
        with engine.connect() as conn:
            count = conn.execute(text(f"""
                SELECT COUNT(*) FROM {writable_table} 
                WHERE {writable_column} LIKE '–¢–µ—Å—Ç –∏–∑ –ø–æ—Ç–æ–∫–∞%'
            """)).scalar()
            
            expected_count = thread_count * 3  # 3 –∑–∞–ø–∏—Å–∏ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            if count < expected_count:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º "–º–µ–Ω—å—à–µ", –∞ –Ω–µ "–Ω–µ —Ä–∞–≤–Ω–æ", —Ç–∞–∫ –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–ø–∏—Å–∏
                reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", False, 
                                 f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º {expected_count} –∑–∞–ø–∏—Å–µ–π, –ø–æ–ª—É—á–µ–Ω–æ {count}")
                reporter.end_test(False)
                return False
                
            reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", True, 
                             f"–ó–∞–ø–∏—Å–µ–π: {count} (–æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º {expected_count})")
        
        reporter.end_test(True)
        return True
    
    except Exception as e:
        reporter.add_step("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", False, str(e))
        reporter.end_test(False)
        return False
    
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ê–ú–ò
        cleanup_ami(ami_initializer)

def test_connection_resilience():
    """
    –¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–Ω—Ü–∏–ø–æ–º "–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –±—ã—Ç–∏—è", –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î.
    
    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL –∏ –º–æ–∂–µ—Ç
    —Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –º–æ–∂–µ—Ç
    –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
    """
    reporter.start_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º PostgreSQL
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sudo –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç
    has_service_control = False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º (—Ç—Ä–µ–±—É–µ—Ç—Å—è sudo)
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –ø—Ä–æ–ø—É—Å—Ç–∏–º —Ä–µ–∞–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Ä–≤–∏—Å–∞
        has_service_control = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ä–≤–∏—Å–æ–º
        
        if not has_service_control:
            reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º PostgreSQL", False, 
                             "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º")
            reporter.end_test(skipped=True)
            return "skipped"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ê–ú–ò
        try:
            ami_name, ami_password, ami_initializer = create_unique_ami()
            reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏")
        except Exception as e:
            reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò", False, str(e))
            reporter.end_test(False)
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–≤–∏–∂–∫–æ–≤
            engine_manager = EngineManager()
            reporter.add_step("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ EngineManager")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò
            engine = engine_manager.get_engine(
                ami_name=ami_name,
                ami_password=ami_password,
                pool_recycle=10  # –ë—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
            )
            reporter.add_step("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ê–ú–ò")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            with engine.connect() as conn:
                result = conn.execute(text("SELECT 1")).scalar()
                if result != 1:
                    reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", False, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    reporter.end_test(False)
                    return False
                    
            reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            
            reporter.add_step("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", True, "–°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PostgreSQL (—Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
            os.system("sudo service postgresql stop")
            time.sleep(2)  # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            reporter.add_step("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º PostgreSQL")
            try:
                with engine.connect() as conn:
                    conn.execute(text("SELECT 1")).scalar()
                reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º PostgreSQL", False, 
                                 "–û—à–∏–±–∫–∞! –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º PostgreSQL")
                reporter.end_test(False)
                return False
            except OperationalError:
                reporter.add_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º PostgreSQL")
            
            reporter.add_step("–ó–∞–ø—É—Å–∫ PostgreSQL")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL —Å–Ω–æ–≤–∞
            os.system("sudo service postgresql start")
            time.sleep(5)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞
            retry_count = 5
            success = False
            
            for i in range(retry_count):
                try:
                    with engine.connect() as conn:
                        result = conn.execute(text("SELECT 1")).scalar()
                        if result == 1:
                            success = True
                            break
                except OperationalError:
                    reporter.add_step(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {i+1}/{retry_count}", False)
                    time.sleep(2)
            
            if not success:
                reporter.add_step("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞", False, 
                                 "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ PostgreSQL")
                reporter.end_test(False)
                return False
                
            reporter.add_step("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
            
            reporter.end_test(True)
            return True
        
        except Exception as e:
            reporter.add_step("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", False, str(e))
            reporter.end_test(False)
            return False
        
        finally:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
            if has_service_control:
                os.system("sudo service postgresql start")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ê–ú–ò
            cleanup_ami(ami_initializer)
    
    except Exception as e:
        reporter.add_step("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º", False, str(e))
        reporter.end_test(skipped=True)
        return "skipped"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    logger.info("=== –ù–∞—á–∞–ª–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è EngineManager ===")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_results = {
        "test_invalid_credentials": test_invalid_credentials(),
        "test_auto_create_with_errors": test_auto_create_with_errors(),
        "test_concurrent_connections": test_concurrent_connections(),
        "test_connection_resilience": test_connection_resilience()
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    report = reporter.generate_report()
    logger.info(report)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    all_passed = all(result == True or result == "skipped" for result in test_results.values())
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)